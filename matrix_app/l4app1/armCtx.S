;/*********************************************************************************************************
;**
;**                                    中国软件开源组织
;**
;**                                   嵌入式实时操作系统
;**
;**                                       SylixOS(TM)
;**
;**                               Copyright  All Rights Reserved
;**
;**--------------文件信息--------------------------------------------------------------------------------
;**
;** 文   件   名: armCtx.S
;**
;** 创   建   人: Wang.Dongfang (王东方)
;**
;** 文件创建日期: 2018 年 03 月 05 日
;**
;** 描        述: arm 体系构架上下文切换.
;*********************************************************************************************************/

;/*********************************************************************************************************
;
;**********************************************************************************************************
;  内核模式下的线程上下文
;**********************************************************************************************************
;#if 1  精简版内核上下文
; typedef struct {
;     ARCH_REG_T      KCTX_uiPc;
;     ARCH_REG_T      KCTX_uiCpsr;
;     ARCH_REG_T      KCTX_uiFp;
; } ARCH_KERN_CTX;
;#else
; typedef struct {
;     ARCH_REG_T      KCTX_uiCpsr;
;     ARCH_REG_T      KCTX_uiR0;
;     ARCH_REG_T      KCTX_uiR1;
;     ARCH_REG_T      KCTX_uiR2;
;     ARCH_REG_T      KCTX_uiR3;
;     ARCH_REG_T      KCTX_uiR4;
;     ARCH_REG_T      KCTX_uiR5;
;     ARCH_REG_T      KCTX_uiR6;
;     ARCH_REG_T      KCTX_uiR7;
;     ARCH_REG_T      KCTX_uiR8;
;     ARCH_REG_T      KCTX_uiR9;
;     ARCH_REG_T      KCTX_uiR10;
;     ARCH_REG_T      KCTX_uiFp;  R11
;     ARCH_REG_T      KCTX_uiIp;  R12
;     ARCH_REG_T      KCTX_uiLr;  R14
;     ARCH_REG_T      KCTX_uiPc;  R15
; } ARCH_KERN_CTX;
;#endif
;
;*********************************************************************************************************/

#ifndef ASSEMBLY
#define ASSEMBLY 1
#endif

;/*#include <arch/arch_assembler.h>*/
;/*********************************************************************************************************
;  assembler define
;*********************************************************************************************************/
#  define EXPORT_LABEL(label)       .global label
#  define IMPORT_LABEL(label)       .extern label

#  define FUNC_DEF(func)  \
        .code   32; \
        .balign 8;  \
        .type func, %function;  \
func:

#  define FUNC_END(func)    \
        .ltorg

#  define FILE_BEGIN()  \
        .text;  \
        .balign 8;

#  define FILE_END()    \
        .end


    FILE_BEGIN()

;/*********************************************************************************************************
;  ARM 体系构架相关上下文函数
;*********************************************************************************************************/

    IMPORT_LABEL(tcb_swap)

    EXPORT_LABEL(archCtxStart)
    EXPORT_LABEL(archCtxSwitch)

;/*********************************************************************************************************
;  当前 CPU 开始运行多任务执行, 在 CPU 被激活时调用
;  参数为要启动的 CPU 控制块指针, 即 R0 为 CPU 控制块指针
;  函数原型: VOID  archCtxStart (PMX_PHYS_CPU  pcpuStart)
;*********************************************************************************************************/
FUNC_DEF(archCtxStart)
    LDR     R1 , [R0]                                                   ;/*  获取该任务堆栈栈顶地址      */
    LDR     SP , [R1]                                                   ;/*  堆栈指针赋值                */

    LDMFD   SP!, {FP}
    LDMFD   SP!, {R1}                                                   ;/*  CPSR 出栈到 R4              */
    MSR     SPSR_cxsf, R1
    LDMFD   SP!, {PC}^                                                  ;/*  包括 PC 的所有寄存器出栈,   */
    FUNC_END()

;/*********************************************************************************************************
;  在内核状态下线程切换
;  参数为当前 CPU 控制块指针, 即 R0 为当前 CPU 控制块指针
;  函数原型: VOID  archCtxSwitch (PMX_PHYS_CPU  pcpuSw)
;*********************************************************************************************************/
FUNC_DEF(archCtxSwitch)
    STMFD   SP!, {LR}                                                   ;/*  保存返回地址                */
    MRS     R1 , CPSR                                                   ;/*  保存 CPSR                   */
    STMFD   SP!, {R1}
    STMFD   SP!, {FP}                                                   ;/*  保存栈基                    */

    LDR     R1 , [R0]                                                   ;/*  使用 R1 因为不用恢复        */
    STR     SP , [R1]                                                   ;/*  栈顶值存入 VCPU 结构体      */ 

    STMFD   SP!, {R0}                                                   ;/*  当前 CPU 信息入栈           */
    LDR     R1 , =tcb_swap                                              ;/*  tcb_swap() 函数没有返回值   */
    MOV     LR , PC                                                     ;/*  所以无法保证返回之后 R0 不变*/
    BX      R1                                                          ;/*  此时尚未切栈，故先保存 R0   */
    LDMFD   SP!, {R0}                                                   ;/*  当前 CPU 信息出栈           */

    LDR     R1 , [R0]
    LDR     SP , [R1]

    LDMFD   SP!, {FP}                                                   ;/*  恢复栈基                    */
    LDMFD   SP!, {R1}                                                   ;/*  通过 SPSR 恢复 CPSR         */
    MSR     SPSR , R1
    LDMFD   SP!, {PC}^                                                  ;/*  返回调用处                  */
    FUNC_END()

    FILE_END()

;/*********************************************************************************************************
;  END
;*********************************************************************************************************/


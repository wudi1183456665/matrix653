/*********************************************************************************************************
**
**                                    中国软件开源组织
**
**                                嵌入式 L4 微内核操作系统
**
**                                SylixOS(TM)  MX : matrix
**
**                               Copyright All Rights Reserved
**
**--------------文件信息--------------------------------------------------------------------------------
**
** 文   件   名: ppc_support.h
**
** 创   建   人:Li.Yanqi
**
** 文件创建日期: 2018 年 06 月 29 日
**
** 描        述: ppc 体系构架接口, 板级支持包接口.
*********************************************************************************************************/

#ifndef __PPC_SUPPORT_H
#define __PPC_SUPPORT_H

#include "mm/ppcMmu.h"


//#if defined(MX_CFG_CPU_ARCH_PPC)

/*********************************************************************************************************
  存储器定义 (CPU 栈区操作)
*********************************************************************************************************/
#define CPU_STK_GROWTH              1                                   /*  1：入栈从高地址向低地址            */
																		/*  0：入栈从低地址向高地址            */
/*********************************************************************************************************
  arch 已提供的接口如下
*********************************************************************************************************/
VOID            archKernelParam(CPCHAR pcParam);
/*********************************************************************************************************
  ppc 处理器断言
*********************************************************************************************************/
VOID            archAssert(INT  iCond, CPCHAR  pcFunc, CPCHAR pcFile, INT iLine);
/*********************************************************************************************************
  ppc 处理器线程上下文相关接口
*********************************************************************************************************/
PMX_STACK       archVcpuCtxCreate(VOID_FUNCPTR  pfuncShell,
                                  PMX_STACK     pstkTop,
                                  ULONG         ulOpt);
VOID			archVcpuCtxStart(PMX_PHYS_CPU  pcpuStart);
VOID			archVcpuCtxSwitch(PMX_PHYS_CPU  pcpuSw);
VOID			archVcpuCtxPrint(PMX_STACK  pstkTop);
VOID			archJumpToUser(PVOID  pvArg, PVCPU_START_ROUTINE  pfuncStart);
VOID			archJumpToKern(PVOID  pvArg, PVCPU_START_ROUTINE  pfuncStart);
/*********************************************************************************************************
  ppc 处理器进程相关接口
*********************************************************************************************************/
VOID            archPartitionCreate (VOID);
/*********************************************************************************************************
  ppc 处理器异常接口
*********************************************************************************************************/
VOID			archIntHandle(ULONG  ulVector, PARCH_USER_CTX  puctxSP);	/*  bspIntHandle 需要调用此函数 */
VOID			archIntCtxLoad(PMX_PHYS_CPU  pcpuSw);
/*********************************************************************************************************
  ppc 通用库
*********************************************************************************************************/
INT				archFindLsb(UINT32 ui32);
INT				archFindMsb(UINT32 ui32);
/*********************************************************************************************************
  ppc 处理器标准底层库
*********************************************************************************************************/
INTREG			archIntDisable(VOID);
VOID			archIntEnable(INTREG  iregInterLevel);
VOID			archIntEnableForce(VOID);
/*********************************************************************************************************
  ppc 处理器定义
*********************************************************************************************************/
#define PPC_MACHINE_750         "750"
/*********************************************************************************************************
  ppc 处理器 CACHE 操作
*********************************************************************************************************/
VOID			archCacheInit(CACHE_MODE  uiInstruction, CACHE_MODE  uiData, CPCHAR  pcMachineName);
/*********************************************************************************************************
  ppc 处理器 MMU 操作 ----MMU部分不确定、内存管理需要和PPC一致，这个是从ARM上抄过来的
*********************************************************************************************************/
#if 0
VOID    archMmuInit(CPCHAR  pcMachineName);
INT     archMmuDataTlbPreLoad(addr_t  ulAddr);
#else
VOID    archMmuInit(CPCHAR  pcMachineName);
INT     archMmuDataTlbPreLoad(addr_t  ulAddr);
#endif
/*********************************************************************************************************
  ppc 处理器多核自旋锁操作
*********************************************************************************************************/
VOID			archSpinInit(spinlock_t  *psl);
VOID			archSpinDelay(VOID);
VOID			archSpinNotify(VOID);
INT				archSpinLock(spinlock_t  *psl);
INT 			archSpinTryLock(spinlock_t  *psl);
INT				archSpinUnlock(spinlock_t  *psl);
//ULONG			archMpCur(VOID);
VOID			archMpInt(ULONG  ulCPUId);
/*********************************************************************************************************
  ppc 内存屏障
*********************************************************************************************************/
#define KN_BARRIER()			__asm__ __volatile__("" : : : "memory")
#define KN_SYNC()				__asm__ __volatile__("sync" : : : "memory")

#define KN_MB()					KN_SYNC()
#define KN_RMB()				KN_SYNC()
#define KN_WMB()				KN_SYNC()

#define KN_SMP_MB() 			__asm__ __volatile__("sync" : : : "memory")
#define KN_SMP_RMB() 			__asm__ __volatile__("sync" : : : "memory")
#define KN_SMP_WMB() 			__asm__ __volatile__("sync" : : : "memory")
/*********************************************************************************************************
  ppc 处理器中断向量判断
*********************************************************************************************************/
VOID			bspIntHandle(PARCH_USER_CTX  puctxSP);
VOID			bspIntVectorEnable(ULONG   ulVector);
VOID			bspIntVectorDisable(ULONG  ulVector);
BOOL			bspIntVectorIsEnable(ULONG ulVector);
/*********************************************************************************************************
  CPU 定时器时钟
*********************************************************************************************************/
VOID			bspTickInit(VOID);
VOID			bspDelayUs(ULONG  ulUs);
/*********************************************************************************************************
  内存信息
*********************************************************************************************************/
ULONG			bspInfoSfrBase(VOID);
ULONG			bspInfoSfrSize(VOID);
ULONG			bspInfoKerRamBase(VOID);
ULONG			bspInfoKerRamSize(VOID);
ULONG			bspInfoPrtRamBase(VOID);
ULONG			bspInfoPrtRamSize(VOID);
/*********************************************************************************************************
  ppc 处理器 MMU 操作
*********************************************************************************************************/
ULONG   		bspMmuPgdMaxNum(VOID);
ULONG   		bspMmuPteMaxNum(VOID);
ULONG   		bspMmuTlbSize(VOID);
/*********************************************************************************************************
  ppc 处理器多核操作
*********************************************************************************************************/
VOID            bspMpInt(ULONG  ulCPUId);                               /*  产生一个核间中断            */
VOID            bspCpuUp(ULONG  ulCPUId);                               /*  启动一个 CPU                */
VOID            bspCpuUpDone(VOID);                                     /*  一个 CPU 启动完成           */
VOID            bspCpuDown(ULONG  ulCPUId);                             /*  停止一个 CPU                */
VOID            bspCpuIpiVectorInstall(VOID);                           /*  安装 IPI 向量               */
/*********************************************************************************************************
  信息打印（打印信息不可依赖任何 api）
*********************************************************************************************************/
VOID            bspDebugMsg(UCHAR  ucCurr, ...);

/*********************************************************************************************************
  PPC 处理器获取 MSR 寄存器的值。
*********************************************************************************************************/
INTREG			ppcGetMSR(VOID);




#endif /* PPC_SUPPORT_H_ */

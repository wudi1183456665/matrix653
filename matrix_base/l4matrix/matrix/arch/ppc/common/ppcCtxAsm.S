;/*********************************************************************************************************
;**
;**                                    中国软件开源组织
;**
;**                                   嵌入式实时操作系统
;**
;**                                       SylixOS(TM)
;**
;**                               Copyright  All Rights Reserved
;**
;**--------------文件信息--------------------------------------------------------------------------------
;**
;** 文   件   名: ppcCtxAsm.S
;**
;** 创   建   人: Li.Yanqi
;**
;** 文件创建日期: 2018 年 07 月 09 日
;**
;** 描        述: arm 体系构架上下文切换.
;*********************************************************************************************************/

#ifndef ASSEMBLY
#define ASSEMBLY 1
#endif

#include <arch/arch_assembler.h>
#include "ppcCtxAsm.h"

	FILE_BEGIN()

;/*********************************************************************************************************
;  Power PC 体系构架相关上下文函数
;*********************************************************************************************************/

    IMPORT_LABEL(schedSwap)

    EXPORT_LABEL(archVcpuCtxStart)
    EXPORT_LABEL(archVcpuCtxSwitch)
    EXPORT_LABEL(archJumpToUser)
    EXPORT_LABEL(archJumpToKern)







#if 1 /* 精简版内核上下文 */
;/*********************************************************************************************************
;  当前 CPU 开始运行多任务执行, 在 CPU 被激活时调用
;  参数为要启动的 CPU 控制块指针, 即 R0 为 CPU 控制块指针
;  函数原型: VOID  archVcpuCtxStart (PMX_PHYS_CPU  pcpuStart)
;*********************************************************************************************************/
FUNC_DEF(archVcpuCtxStart)
	LIS		R4 , HI(~7)
	ORI		R4 , R4 , LO(~7)
	AND     SP , SP , R4                                                ;/*  SP 向下 8 字节对齐        	 	*/
	MTSPR   SPRG1 , SP                                                  ;/*  设置异常临时栈(使用启动栈)  	*/

    LWZ     R4 , 0(R3)                                                  ;/*  获取当前 TCB 的 REG_CTX 地址	*/
    RESTORE_REGS                                                        ;/*  恢复所有寄存器             	 	*/
    FUNC_END()


FUNC_DEF(archVcpuCtxSwitch)
    LWZ     R4 , 0(R3)                                                  ;/*  获取当前 TCB 的 REG_CTX 地址*/
    SAVE_REGS                                                           ;/*  保存所有寄存器              */

    OR      R14, R3 , R3                                                ;/*  备份当前 CPU 控制块         */

    SUBI    SP , SP , 16                                                ;/*  开辟 C 函数栈帧             */
    BL      SchedSwp                                                   ;/*  _SchedSwp();                */
    OR      R3 , R14, R14                                               ;/*  恢复当前 CPU 控制块         */

    LWZ     R4 , 0(R3)                                                  ;/*  获取当前 TCB 的 REG_CTX 地址*/
    RESTORE_REGS                                                        ;/*  恢复所有寄存器              */

	FUNC_END()
#else
;/*********************************************************************************************************
;  当前 CPU 开始运行多任务执行, 在 CPU 被激活时调用
;  参数为要启动的 CPU 控制块指针, 即 R0 为 CPU 控制块指针
;  函数原型: VOID  archVcpuCtxStart (PMX_PHYS_CPU  pcpuStart)
;*********************************************************************************************************/
FUNC_DEF(archVcpuCtxStart)

    FUNC_END()
;/*********************************************************************************************************
;  在内核状态下线程切换
;  参数为当前 CPU 控制块指针, 即 R0 为当前 CPU 控制块指针
;  函数原型: VOID  archVcpuCtxSwitch (PMX_PHYS_CPU  pcpuSw)
;*********************************************************************************************************/
FUNC_DEF(archVcpuCtxSwitch)
    FUNC_END()
#endif



;/*********************************************************************************************************
;  跳到用户模式
;*********************************************************************************************************/
FUNC_DEF(archJumpToUser)


    FUNC_END()

;/*********************************************************************************************************
;  跳到内核模式
;*********************************************************************************************************/
FUNC_DEF(archJumpToKern)


    FUNC_END()


    FILE_END()

;/*********************************************************************************************************
;  END
;*********************************************************************************************************/


/*********************************************************************************************************
**
**                                    中国软件开源组织
**
**                                嵌入式 L4 微内核操作系统
**
**                                SylixOS(TM)  MX : matrix
**
**                               Copyright All Rights Reserved
**
**--------------文件信息--------------------------------------------------------------------------------
**
** 文   件   名: k_sched.h
**
** 创   建   人: Wang.Dongfang (王东方)
**
** 文件创建日期: 2018 年 01 月 09 日
**
** 描        述: 这是微内核调度类型定义包括就绪表, 候选表, 唤醒表.
*********************************************************************************************************/

#ifndef __K_SCHED_H
#define __K_SCHED_H

/*********************************************************************************************************
  位图
*********************************************************************************************************/
typedef struct {
    volatile UINT32       BMAP_uiMap;                                   /*  主位图掩码                  */
    volatile UINT32       BMAP_uiSubMap[(MX_PRIO_LOWEST >> 5) + 1];     /*  辅位图掩码                  */
} MX_BMAP;
typedef MX_BMAP          *PMX_BMAP;
/*********************************************************************************************************
  同优先级控制块
*********************************************************************************************************/
typedef struct {
    MX_LIST_RING_HEADER   RDYP_pringReadyHeader;                        /*  就绪非运行线程环表          */
    UINT32                RDYP_uiPriority;                              /*  优先级                      */
} MX_RDYP;
typedef MX_RDYP          *PMX_RDYP;
/*********************************************************************************************************
  就绪表
*********************************************************************************************************/
typedef struct {
    MX_BMAP               RDY_bmap;                                     /*  位图                        */
    MX_RDYP               RDY_rdyp[MX_PRIO_LOWEST + 1];                 /*  优先级控制块数组            */
} MX_READY;
typedef MX_READY         *PMX_READY;
/*********************************************************************************************************
  候选表
*********************************************************************************************************/
typedef struct {
    volatile PMX_VCPU     CAND_pvcpuCand;                               /*  候选运行线程                */
    volatile BOOL         CAND_bNeedRotate;                             /*  可能产生了优先级卷绕        */
} MX_CAND;
typedef MX_CAND          *PMX_CAND;
/*********************************************************************************************************
  唤醒表
*********************************************************************************************************/
typedef struct {
    MX_LIST_LINE_HEADER   WU_plineHeader;                               /*  双向线性链表头              */
} MX_WAKEUP;
typedef MX_WAKEUP        *PMX_WAKEUP;
/*********************************************************************************************************
  优先级比较
*********************************************************************************************************/
#define MX_PRIO_IS_EQU(prio1, prio2)            (prio1 == prio2)
#define MX_PRIO_IS_HIGH_OR_EQU(prio1, prio2)    (prio1 <= prio2)
#define MX_PRIO_IS_HIGH(prio1, prio2)           (prio1 <  prio2)
/*********************************************************************************************************
  全局就绪表
*********************************************************************************************************/
#define MX_GLOBAL_RDY()              (&(_K_readyGlobal))
#define MX_GLOBAL_RDY_BMAP()         (&(_K_readyGlobal.RDY_bmap))
#define MX_GLOBAL_RDY_RDYP(prio)     (&(_K_readyGlobal.RDY_rdyp[prio]))
/*********************************************************************************************************
  CPU 局部就绪表
*********************************************************************************************************/
#define MX_CPU_RDY(pcpu)             (&(pcpu->CPU_ready))
#define MX_CPU_RDY_BMAP(pcpu)        (&(pcpu->CPU_ready.RDY_bmap))
#define MX_CPU_RDY_RDYP(pcpu, prio)  (&(pcpu->CPU_ready.RDY_rdyp[prio]))
/*********************************************************************************************************
  CPU 候选表基本操作
*********************************************************************************************************/
#define MX_CAND_VCPU(pcpu)           (pcpu->CPU_cand.CAND_pvcpuCand)
#define MX_CAND_ROT(pcpu)            (pcpu->CPU_cand.CAND_bNeedRotate)
/*********************************************************************************************************
  当前 CPU
*********************************************************************************************************/
#define MX_CPU_GET_CUR_ID()          archMpCur()                        /*  获得当前 CPU ID             */
#define MX_CPU_GET_CUR()             (&_K_cpuTable[archMpCur()])/*  获得当前 CPU 结构           */
/*********************************************************************************************************
  当前 vCPU
*********************************************************************************************************/
#define MX_VCPU_GET_CUR()            (MX_CPU_GET_CUR()->CPU_pvcpuCur)   /*  获取当前 vCPU 控制块        */

#endif                                                                  /*  __K_VCPU_H                  */
/*********************************************************************************************************
  END
*********************************************************************************************************/


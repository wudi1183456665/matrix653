/*********************************************************************************************************
**
**                                    中国软件开源组织
**
**                                嵌入式 L4 微内核操作系统
**
**                                SylixOS(TM)  MX : matrix
**
**                               Copyright All Rights Reserved
**
**--------------文件信息--------------------------------------------------------------------------------
**
** 文   件   名: k_globalvar.h
**
** 创   建   人: Wang.Dongfang (王东方)
**
** 文件创建日期: 2017 年 11 月 17 日
**
** 描        述: 这是系统全局变量定义文件.
*********************************************************************************************************/

#ifndef __K_GLOBALVAR_H
#define __K_GLOBALVAR_H

#ifdef  __GLOBAL_VAR_FILE
#define __KERNEL_EXT
#else
#define __KERNEL_EXT    extern
#endif

/*********************************************************************************************************
  进程程控制块分配池
*********************************************************************************************************/
__KERNEL_EXT  MX_PRTN                 _K_prtnTable[MX_CFG_MAX_PRTNS];
/*********************************************************************************************************
  内核进程指针
*********************************************************************************************************/
__KERNEL_EXT  PMX_PRTN                _K_pprtnKernel;
/*********************************************************************************************************
  物理 CPU 结构体表,  线程控制块分配池, 内核锁
*********************************************************************************************************/
#ifdef __GLOBAL_VAR_FILE
              ULONG                   _K_ulNCpus;
              MX_PHYS_CPU             _K_cpuTable[MX_CFG_MAX_PROCESSORS] MX_CACHE_LINE_ALIGN;
              MX_VCPU_KSTACK          _K_vcpuTable[MX_CFG_MAX_VCPUS] MX_VCPU_SECTION;
              MX_STACK                _K_stkUser[MX_CFG_MAX_USTACKS][MX_CFG_USTACK_SIZE] MX_STACK_ALIGN;
              MX_KERN_LOCK            _K_klKernel MX_CACHE_LINE_ALIGN;
#else
__KERNEL_EXT  const  ULONG            _K_ulNCpus;                       /*  物理 CPU 个数               */
__KERNEL_EXT  MX_PHYS_CPU             _K_cpuTable[MX_CFG_MAX_PROCESSORS];/* 每个 CPU 的内容             */
__KERNEL_EXT  MX_VCPU_KSTACK          _K_vcpuTable[MX_CFG_MAX_VCPUS];   /*  VCPU 分配池                 */
__KERNEL_EXT  MX_STACK                _K_stkUser[MX_CFG_MAX_USTACKS][MX_CFG_USTACK_SIZE];/* 用户栈分配池*/
__KERNEL_EXT  MX_KERN_LOCK            _K_klKernel;                      /*  内核锁                      */
#endif                                                                  /*  __GLOBAL_VAR_FILE           */
/*********************************************************************************************************
  全局就绪表
*********************************************************************************************************/
__KERNEL_EXT  MX_READY                _K_readyGlobal;
/*********************************************************************************************************
  VCPU 唤醒表
*********************************************************************************************************/
__KERNEL_EXT  MX_WAKEUP               _K_wuDelay;                       /*  超时唤醒的链表              */
/*********************************************************************************************************
  堆控制块
*********************************************************************************************************/
__KERNEL_EXT  MX_HEAP                 _K_heapKernel;                    /*  微内核堆                    */
/*********************************************************************************************************
  内核配置参数
*********************************************************************************************************/
__KERNEL_EXT  ULONG                   _K_ulKernFlags;                   /*  内核配置参数                */
/*********************************************************************************************************
  系统启动之后经历的总的 TICK 数
*********************************************************************************************************/
__KERNEL_EXT  UINT64                  _K_ui64TickCounter;               /*  系统时间计数器              */

#if 0
/*********************************************************************************************************
  系统中断向量表
*********************************************************************************************************/
__KERNEL_EXT  MX_INTDESC              _K_idescTable[MX_CFG_MAX_INTER_SRC];
/*********************************************************************************************************
  系统状态
*********************************************************************************************************/
__KERNEL_EXT  UINT8                   _K_ucSysStatus;                   /*  系统状态                    */
__KERNEL_EXT  ULONG                   _K_ulNotRunError;                 /*  系统未启动错误代码存放      */
/*********************************************************************************************************
  线程数计数器
*********************************************************************************************************/
__KERNEL_EXT  UINT16                  _K_usThreadCounter;               /*  线程数量                    */
/*********************************************************************************************************
  空闲线程 ID 及 VCPU
*********************************************************************************************************/
__KERNEL_EXT  MX_OBJECT_ID            _K_ulIdleId[MX_CFG_MAX_PROCESSORS];
__KERNEL_EXT  PMX_VCPU                _K_pvcpuIdle[MX_CFG_MAX_PROCESSORS];
/*********************************************************************************************************
  堆栈相关
*********************************************************************************************************/
__KERNEL_EXT  MX_STACK                _K_stkFreeFlag;                   /*  空闲堆栈区域标志            */
#endif

#endif                                                                  /*  __K_GLOBALVAR_H             */
/*********************************************************************************************************
  END
*********************************************************************************************************/



/*********************************************************************************************************
**
**                                    中国软件开源组织
**
**                                嵌入式 L4 微内核操作系统
**
**                                SylixOS(TM)  MX : matrix
**
**                               Copyright All Rights Reserved
**
**--------------文件信息--------------------------------------------------------------------------------
**
** 文   件   名: k_ipc.h
**
** 创   建   人: Cheng.Yongbin (程永斌)
**
** 文件创建日期: 2018 年 1 月 5 日
**
** 描        述: IPC 数据结构与接口定义
*********************************************************************************************************/

#ifndef __K_IPC_H
#define __K_IPC_H

/*********************************************************************************************************
  宏定义
*********************************************************************************************************/
#define IPC_LOCAL        static                                         /*  局部函数                    */
#define IPC_INLINE       static inline                                  /*  内联函数                    */

#define IPC_ASSERT(exp)  do {                            \
        archAssert(exp, __func__, __FILE__, __LINE__);   \
    } while(0)
/*********************************************************************************************************
  IPC 参数结构
*********************************************************************************************************/
/*********************************************************************************************************
  IPC 操作码
*********************************************************************************************************/
typedef UINT8               IPC_OPCODE_T;

#define IPC_OP_SEND         1                                           /*  该位置位时表示IPC向目标VCPU */
                                                                        /*  发送1个消息                 */

#define IPC_OP_RECV         2                                           /*  该位置位时表示IPC等待接收   */
                                                                        /*  一个消息;                   */

#define IPC_OP_OPEN         4                                           /*  该位是RECV的附加属性,置位时 */
                                                                        /*  表示IPC没有指定接收对象可以 */
                                                                        /*  接收任何VCPU 的消息; 未置位 */
                                                                        /*  时表示只接收特定的VCPU消息; */

#define IPC_OP_REPLY        8                                           /*  该位是SEND的附加属性, 系统  */
                                                                        /*  调用时该位置位表示当前 SEND */
                                                                        /*  是回复之前IPC请求;          */

#define IPC_OP_CLOSE        0                                           /*  关闭 IPC 服务,不再接收新的  */
                                                                        /*  IPC,已接收的请求将返回错误  */
                                                                        /*  可附加 REPLY 模式           */
#define IPC_OP_MASK         0xFF
/*********************************************************************************************************
  IPC 状态
*********************************************************************************************************/
/*********************************************************************************************************
  IPC 状态：与IPC各子过程对应
*********************************************************************************************************/
#define IPC_S_SEND          0x1                                         /*  IPC 请求状态                */
#define IPC_S_RECV          0x2                                         /*  IPC 接收状态                */
#define IPC_S_SEND_WT       0x4                                         /*  IPC 等待发送消息状态        */
#define IPC_S_RECV_WT       0x8                                         /*  IPC 等待接收消息状态        */
#define IPC_S_RECV_IN       0x10                                        /*  IPC 等待接收消息状态        */
#define IPC_S_SEND_FI       0x20                                        /*  IPC 发送完成状态            */
#define IPC_S_RECV_FI       0x40                                        /*  IPC 接收完成状态            */
#define IPC_S_NONE          0x7F                                        /*  结束IPC过程                 */
#define IPC_S_NULL          0x0
/*********************************************************************************************************
  IPC 附加模式
*********************************************************************************************************/
#define IPC_S_OPEN          0x80                                        /*  该位置位有效, 表示IPC没有   */
                                                                        /*  指定接收对象, 可以接收任何  */
                                                                        /*  VCPU的消息                  */
#define IPC_S_CLOSE         0x0                                         /*  0x80未置位有效, 只接收特定的*/
                                                                        /*  VCPU消息                    */
#define IPC_S_REPLY         0x100                                       /*  回复之前的 IPC 请求         */
#define IPC_S_MASK          0xFFF                                       /*  IPC状态掩码                 */
/*********************************************************************************************************
  IPC 线程状态
*********************************************************************************************************/
#define IPC_TS_READY        0x1000                                      /*  IPC 线程就绪, 用于同步      */
                                                                        /*  IPC 服务与 tick 唤醒线程    */
#define IPC_TS_IN_IPC       0x2000                                      /*  请求IPC 的线程进入休眠时设置*/
                                                                        /*  此状态, tick 唤醒时按 IPC   */
                                                                        /*  唤醒逻辑处理                */
#define IPC_TS_SER          0x4000                                      /*  服务标识, 置位时可接受 IPC  */
                                                                        /*  请求;IPC_CLOSE调用清除此状态*/
                                                                        /*  使用优先级列表锁同步        */
#define IPC_TS_SER_PEND     0x8000                                      /*  服务器 PEND 状态            */
#define IPC_TS_MASK         0xF000                                      /*  IPC 线程状态掩码            */
/*********************************************************************************************************
  异常类型
*********************************************************************************************************/
typedef UINT32              IPC_ES_T;
/*********************************************************************************************************
  异常状态
*********************************************************************************************************/
#define IPC_ES_TIMEOUT      0x10000                                     /*  IPC 请求超时                */
#define IPC_ES_CANCLE       0x20000                                     /*  取消 IPC                    */
#define IPC_ES_ERROR        0x40000                                     /*  IPC 过程出错                */
#define IPC_ES_MASK         0xF0000                                     /*  异常状态掩码                */
#define IPC_ES_OK           0                                           /*  IPC 过程无异常              */
#define IPC_S_ES_MASK       IPC_S_MASK | IPC_ES_MASK                    /*  IPC 过程与异常状态掩码      */
/*********************************************************************************************************
  IPC 异步事件状态
*********************************************************************************************************/
#define IPC_EVTS_REQUEST    0x1000000                                   /*  IPC 请求事件                */
#define IPC_EVTS_TIMEOUT    0x2000000                                   /*  IPC 请求超时事件            */
#define IPC_EVTS_CANCLE     0x4000000                                   /*  取消当前 IPC(预留)          */
#define IPC_EVTS_STOP       0x8000000                                   /*  停此 IPC 服务(预留)         */
#define IPC_EVTS_MASK       0xFF000000                                  /*  IPC 异步事件状态掩码        */

#define IPC_S_IPC_MASK      IPC_S_MASK | IPC_EVTS_MASK                  /*  IPC 状态掩码                */
#define IPC_S_ALL_MASK      IPC_S_ES_MASK |                    \
                            IPC_TS_READY  | IPC_TS_SER_PEND |  \
                            IPC_EVTS_MASK                               /*  IPC + 线程所有状态掩码      */
/*********************************************************************************************************
  IPC 消息
*********************************************************************************************************/
/*********************************************************************************************************
  IPC 消息缓冲大小 = 页面大小 - 消息头大小
*********************************************************************************************************/
#define IPC_MSG_ITEMS    ((MX_CFG_PAGE_SIZE - 16) / sizeof(ULONG))
/*********************************************************************************************************
   IPC 消息: 与用户空间建立内存映射
   减少 IPC 过程中 cache 置换, 将访问控制信息集中在同一结构中
*********************************************************************************************************/
struct __mx_ipc_msg {
        UINT32          IMSG_uiFlags;                                   /*  消息描述                    */
        UINT32          IMSG_uiCount;                                   /*  消息个数                    */
        UINT32          IMSG_uiOffset;                                  /*  消息访问游标                */
        UINT32          IMSG_uiAccess;                                  /*  访问控制:                   */
                                                                        /*    BIT0: 读写状态; 1 - 写    */
    union {                                                             /*  消息缓冲区                  */
        ULONG           IMSG_ulBuff[IPC_MSG_ITEMS];                     /*  一般数据按 ULONG 组织       */
                                                                        /*  提高访问效率, 空间足够      */
        LONG            IMSG_lBuff[IPC_MSG_ITEMS];
        CHAR            IMSG_chBuff[IPC_MSG_ITEMS*sizeof(ULONG)];       /*  内存块可按字节组织          */
    };
} __attribute__((aligned(MX_CFG_PAGE_SIZE)));
typedef struct __mx_ipc_msg     MX_IPC_MSG;
typedef        MX_IPC_MSG      *PMX_IPC_MSG;
/*********************************************************************************************************
  ipc msg 字符串结构
*********************************************************************************************************/
typedef struct {
    ULONG   ISTR_ulSize;
    CHAR    ISTR_ucBuf[1];
} IPC_STRING;
typedef IPC_STRING     *PIPC_STRING;

#define IPC_DEBUG_BUF_OFFSET        (IPC_MSG_ITEMS * sizeof(ULONG) / 2) /*  IPC_MSG 调试缓冲区偏移      */
/*********************************************************************************************************
  ipc msg 访问操作
*********************************************************************************************************/
/*********************************************************************************************************
  获取消息数量
*********************************************************************************************************/
#define IPC_MSG_COUNT(pipcMsg)      (pipcMsg->IMSG_uiCount)
/*********************************************************************************************************
  查询访问状态
*********************************************************************************************************/
#define IPC_MSG_WRITEABLE(pipcMsg)  ((pipcMsg->IMSG_uiAccess & 0x1) == 1)

VOID  ipcMsgReadOpen(PMX_IPC_MSG  pipcMsg);
VOID  ipcMsgWriteOpen(PMX_IPC_MSG  pipcMsg);
VOID  ipcMsgFlush(PMX_IPC_MSG  pipcMsg);
BOOL  ipcMsgUlWrite(PMX_IPC_MSG  pipcMsg, ULONG  ulData);
BOOL  ipcMsgUlRead(PMX_IPC_MSG  pipcMsg, ULONG  *pulData);
/*********************************************************************************************************
  IPC 事件队列
*********************************************************************************************************/
typedef struct {
    MX_LIST_RING_HEADER IEQ_pringHead;                                  /*  事件队列头, 结点是 IPC 结构 */
    spinlock_t          IEQ_spLock;                                     /*  事件队列自旋锁              */
} IPC_EVTQ;
typedef IPC_EVTQ       *PIPC_EVTQ;
/*********************************************************************************************************
  IPC 优先级请求列表
*********************************************************************************************************/
typedef struct {
    MX_LIST_RING_HEADER IPL_pringHead[MX_CFG_IPC_PRIO_MAX];             /*  优先级列表, 结点是 IPC 结构 */
    //MX_LIST_RING_HEADER IPL_pringHead[1];
    UINT32              IPL_uiPrioCur;                                  /*  当前最高优先级              */
    spinlock_t          IPL_spLock;                                     /*  优先级表保护自旋锁          */
    UINT32              IPL_uiSignal;                                   /*  信号量计数：当前待处理的    */
                                                                        /*  IPC 请求数量                */
    /*
     *  IPC_TS_SER: 当前是否 IPC 服务状态
     *  - IPC 请求之前需检查服务状态为原子操作, 使用 IPL_spLock 同步
     */
} IPC_PLIST;
typedef IPC_PLIST      *PIPC_PLIST;
/*********************************************************************************************************
  IPC 结构
*********************************************************************************************************/
struct __mx_ipc {
    /*
     *  IPC 状态属性
     */
    UINT32           IPC_uiState;                                       /*  IPC 状态, 包含就绪标识位    */
    spinlock_t       IPC_spStateLock;                                   /*  IPC 状态保护自旋锁          */
    UINT32           IPC_uiRmStateAdd;                                  /*  IPC 异步增量状态            */
    UINT32           IPC_uiRmStateDel;                                  /*  IPC 异步减量状态            */
    spinlock_t       IPC_spRmStateLock;                                 /*  IPC 异步状态保护自旋锁      */
    struct __mx_ipc *IPC_pipcTag;                                       /*  IPC 通信目标 IPC (target)   */
    /*
     *  IPC 消息
     */
    PMX_IPC_MSG      IPC_pMsg;                                          /*  IPC msg 与用户 msg 需建立   */
                                                                        /*  映射关系，内存分配有特殊性  */
    /*
     *  IPC 事件表
     */
    MX_LIST_RING     IPC_ringEvtqNode;                                  /*  IPC 事件队列结点            */
    IPC_EVTQ         IPC_evtqQueue;                                     /*  IPC 事件队列                */
    /*
     *  IPC优先级请求列表
     */
    MX_LIST_RING     IPC_ringPlistNode;                                 /*  优先级请求表结点            */
    IPC_PLIST        IPC_plistPrio;                                     /*  优先级请求表                */
};
typedef struct __mx_ipc  MX_IPC;
typedef MX_IPC          *PMX_IPC;
/*********************************************************************************************************
  核间中断自定义消息类型
  同步执行函数为 IPI Call 必须等待其执行完毕才能退出, 异步执行函数为不需要等待的函数.
*********************************************************************************************************/
typedef struct __ipi_msg {
    MX_LIST_RING                IPIM_ringManage;                        /*  管理链表                    */
    INT_FUNCPTR                 IPIM_pfuncCall;                         /*  同步执行函数                */
    PVOID                       IPIM_pvArg;                             /*  同步执行参数                */
    VOID_FUNCPTR                IPIM_pfuncAsyncCall;                    /*  异步执行函数                */
    PVOID                       IPIM_pvAsyncArg;                        /*  异步执行参数                */
    INT                         IPIM_iRet;                              /*  同步执行函数返回值          */
    INT                         IPIM_iOption;                           /*  执行选项                    */
#define IPIM_OPT_NORMAL         0                                       /*  收到核间中断立即执行        */
#define IPIM_OPT_NOKERN         1                                       /*  不能运行在内核状态中        */
    volatile INT                IPIM_iWait;                             /*  等待信息                    */
} MX_IPI_MSG;
typedef MX_IPI_MSG             *PMX_IPI_MSG;

/*********************************************************************************************************
  对象获取/设置宏定义
*********************************************************************************************************/
/*********************************************************************************************************
  获取 VCPU
*********************************************************************************************************/
#define IPC_OBJ_TO_VCPU(objVcpu)        (kobjCheck(objVcpu, _KOBJ_VCPU) ? \
                                             (PMX_VCPU)kobjGet(objVcpu) : \
                                                               MX_NULL)
/*********************************************************************************************************
  获取 VCPU 对象 ID
*********************************************************************************************************/
#define IPC_VCPU_TO_OBJ(pvcpu)          (pvcpu->VCPU_ulVcpuId)
/*********************************************************************************************************
  获取 IPC 所在 VCPU
*********************************************************************************************************/
#define IPC_TO_VCPU(pIpc)               (_LIST_CONTAINER_OF(pIpc, MX_VCPU, VCPU_ipc))
/*********************************************************************************************************
  获取 VCPU 的 IPC
*********************************************************************************************************/
#define IPC_VCPU_TO_IPC(pvcpu)          (&pvcpu->VCPU_ipc)
/*********************************************************************************************************
  获取 VCPU 的 IPC_MSG
*********************************************************************************************************/
#define MX_IPC_MSG_GET(pvcpu)           (pvcpu->VCPU_ipc.IPC_pMsg)
#define MX_SCPARAM_GET(pIpc)            (&(IPC_TO_VCPU(pIpc)->VCPU_scparam))
/*********************************************************************************************************
  设置线程 IPC 状态:
  请求 IPC 的线程进入休眠时设置 IPC 状态, tick 唤醒时按IPC 唤醒逻辑处理
*********************************************************************************************************/
#define IPC_SET_IN_PROCESS(pIpc, isIn)  do {                     \
        (pIpc)->IPC_uiState &= ~(isIn ? 0 : IPC_TS_IN_IPC);      \
        (pIpc)->IPC_uiState |=  (isIn ? IPC_TS_IN_IPC : 0);      \
} while(0)
/*********************************************************************************************************
  获取线程 IPC  状态
*********************************************************************************************************/
#define IPC_GET_IN_PROCESS(pIpc)                                 \
        (((pIpc)->IPC_uiState & IPC_TS_IN_IPC) == IPC_TS_IN_IPC)

#endif                                                                  /*  __K_IPC_H                   */
/*********************************************************************************************************
  END
*********************************************************************************************************/
